knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
ggacf <- function(x, ci=0.95, type="correlation", xlab="Lag", ylab=NULL,
ylim=NULL, main=NULL, ci.col="blue", lag.max=NULL) {
x <- as.data.frame(x)
x.acf <- acf(x, plot=F, lag.max=lag.max, type=type)
ci.line <- qnorm((1 - ci) / 2) / sqrt(x.acf$n.used)
d.acf <- data.frame(lag=x.acf$lag, acf=x.acf$acf)
g <- ggplot(d.acf, aes(x=lag, y=acf)) +
geom_hline(yintercept=0) +
geom_segment(aes(xend=lag, yend=0)) +
geom_hline(yintercept=ci.line, color=ci.col, linetype="dashed") +
geom_hline(yintercept=-ci.line, color=ci.col, linetype="dashed") +
theme_bw() +
xlab("Lag") +
ggtitle(ifelse(is.null(main), "", main)) +
if (is.null(ylab))
ylab(ifelse(type=="partial", "PACF", "ACF"))
else
ylab(ylab)
g
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
# generator 100 random uniform samples
hunnit <- runif(100, min = 2, max = 5)
# check properties of uniform generator
# create vector of randomly generated uniform vars
nsim <- 10^4
x <- runif(nsim)
x <- tibble(x)
x
# vectors to plot
x_1 <- x[-nsim]
# generator 100 random uniform samples
hunnit <- runif(100, min = 2, max = 5)
# create vector of randomly generated uniform vars
nsim <- 10^4
x <- runif(nsim)
x <- tibble(x)
x
# vectors to plot
x_1 <- x[-nsim]
# create vector of randomly generated uniform vars
nsim <- 10^4
x <- runif(nsim)
# vectors to plot
x_1 <- x[-nsim]
# adjacent pairs
x_2 <- x[-1]
x <- tibble(x)
x_n <- tibble(x_1, x_2)
# plot
x_hist <- ggplot(x, aes(x)) + geom_histogram(fill = "green", color = "black", alpha = 0.2)
x_plot <- ggplot(x_n, aes(x_1, x_2)) + geom_point(color = "black", alpha = 0.7)
x_acf <- ggacf(x)
x_acf
gridExtra::grid.arrange(x_hist, x_plot, x_acf, ncol = 3)
x_plot <- ggplot(x_n, aes(x_1, x_2)) + geom_point(color = "black", alpha = 0.7) + xlab("x1") + ylab("x2")
gridExtra::grid.arrange(x_hist, x_plot, x_acf, ncol = 3)
unif_hist <- ggplot(X, aes(X)) + geom_histogram(fill = "green", color = "black", alpha = 0.2)
# num random variables
nsim <- 10^4
U <- runif(nsim)
# transformation of uniforms
X <- -log(U)
# exponentials
Y <- rexp(nsim)
unif_hist <- ggplot(X, aes(X)) + geom_histogram(fill = "green", color = "black", alpha = 0.2)
# transform to data frames
X <- tibble(X)
Y <- tibble(Y)
# plot
unif_hist <- ggplot(X, aes(X)) + geom_histogram(fill = "green", color = "black", alpha = 0.2)
exp_hist <- ggplot(Y, aes(Y)) + geom_histogram(fill = "green", color = "black", alpha = 0.2)
gridExtra::grid.arrange(unif_hist, exp_hist, ncol = 2)
# plot
unif_hist <- ggplot(X, aes(X)) + geom_histogram(fill = "green", color = "black", alpha = 0.2) + geom_freqpoly()
gridExtra::grid.arrange(unif_hist, exp_hist, ncol = 2)
exp_hist <- ggplot(Y, aes(Y)) + geom_histogram(fill = "green", color = "black", alpha = 0.2) + geom_freqpoly()
gridExtra::grid.arrange(unif_hist, exp_hist, ncol = 2)
# generate chi sq 6 dof
U <- runif(3*10^4)
# matrix for sums
U <- matrix(data = U, nrow = 3)
# uniform to exponential
X <- -log(U)
# sum up to get chi squares
X <- 2 * apply(X, 2, sum)
U
X
# convert to data frames
X <- tibble(X)
# convert to data frames
U <- tibble(U)
# generate chi sq 6 dof
U <- runif(3*10^4)
# matrix for sums
U <- matrix(data = U, nrow = 3)
# uniform to exponential
X <- -log(U)
# sum up to get chi squares
X <- 2 * apply(X, 2, sum)
# generate 12 unif rvs
U <- runif(n = 12, a = -1/2, b = -1.2)
?runif
# generate 12 unif rvs
U <- runif(n = 12, min = -1/2, max = -1.2)
U
# generate 12 unif rvs
U <- runif(n = 12, min = -1/2, max = -1.2)
U
# generate 12 unif rvs
U <- runif(n = 12, min = -0.5, max = 0.5)
U
# set z = sum U_i
Z <- sum(U)
z
Z
# expected value
U
?apply
# expected value
eU <- apply(U, *)
# expected value
eU <- apply(U, 2, prod)
# expected value
eU <- apply(U, prod)
# expected value
eU <- lapply(U, 2, prod)
# expected value
eU <- apply(U, 1, prod)
# generate 12 unif rvs
U <- runif(n = 12, min = -0.5, max = 0.5)
# expected value
eU <- lapply(U, 1, prod)
?sapply
# expected value
eU <- sapply(U, 1, prod)
# expected value
eU <- sapply(U, prod)
eU
# generate 12 unif rvs
U <- runif(n = 12, min = -0.5, max = 0.5)
# expected value
eU <- sapply(U, prod((1/12)))
?prod
# expected value
eU <- U * (1/12)
eU
eU <- sum(eU)
eU
# generate 12 unif rvs
U <- runif(n = 12, min = -0.5, max = 0.5)
# expected value
eU <- U * (1/12)
eU <- sum(eU)
eU
# make into array
U <- array(0, dim = c(nsim, 1))
nsim = 10^4
U_1 <- runif(nsim)
U_2 <- runif(nsim)
# transformed unif to norm
X_1 <- sqrt(-2 * log(U_1)) * cos(2 * pi * U_2)
X_2 <- sqrt(-2 * log(U_1)) * sin(2 * pi * U_2)
# make into array
U <- array(0, dim = c(nsim, 1))
U
for (i in 1:nsim){
U[i] <- sum(runif(12, -0.5, 0.5))
}
U
hist(X_1)
# coerce to dataframe
X_1 <- tibble(X_1)
X_2 <- tibble(X_2)
U <- tibble(U)
U
# placeholder array
U <- array(0, dim = c(nsim))
# fill array with simulated unifs
for (i in 1:nsim){
U[i] <- sum(runif(12, -0.5, 0.5))
}
U
U <- tibble(U)
U
hist(U)
U
# plot
x1_hist <-
u_hist <- ggplot(U, aes(U)) + geom_histogram(stat = "identity", color = "green", alpha = 0.3)
u_hist
# plot
x1_hist <-
u_hist <- ggplot(U, aes(U)) + geom_histogram(stat = "identity", fill = "green", alpha = 0.3)
u_hist
U <- tibble(U)
# placeholder array
U <- array(0, dim = c(nsim))
# fill array with simulated unifs
for (i in 1:nsim){
U[i] <- sum(runif(12, -0.5, 0.5))
}
U <- tibble(U)
# plot
x1_hist <-
u_hist <- ggplot(U, aes(U)) + geom_histogram(stat = "identity", fill = "green", alpha = 0.3)
u_hist
# plot
x1_hist <-
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", alpha = 0.3)
u_hist
# plot
x1_hist <-
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", color = "black",  alpha = 0.3)
u_hist
# plot
x1_hist <-
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2)
u_hist
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2)
x1_hist
x2_hist <- ggplot(X_2, aes(X_2)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2)
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, ncol = 3)
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, nrow = 3)
gridExtra::grid.arrange(unif_hist, exp_hist, nrow = 2)
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, nrow = 3, size = "last")
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, nrow = 3)
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(0, 3))
x2_hist <- ggplot(X_2, aes(X_2)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(0, 3))
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(0, 3))
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, nrow = 3)
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-3, 3))
x2_hist <- ggplot(X_2, aes(X_2)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-3, 3))
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-3, 3))
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, nrow = 3)
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-3.5, 3.5))
x2_hist <- ggplot(X_2, aes(X_2)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-3.5, 3.5))
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-3.5, 3.5))
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, nrow = 3)
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
x2_hist <- ggplot(X_2, aes(X_2)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, nrow = 3)
# rnorm for comparison
reg_norm <- rnorm(n = 10^4, 0, 1)
reg_norm <- tibble(reg_norm)
reg_norm_hist <- ggplot(reg_norm, aes(reg_norm)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, reg_norm_hist, nrow = 3)
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, reg_norm_hist, nrow = 4)
reg_norm_hist <- ggplot(reg_norm, aes(reg_norm)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4)) + xlab("rnorm")
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, reg_norm_hist, nrow = 4)
# using histograms, compare this CLT normal generator with the Box-Muller algorithm. Pay particular attention to tail probabilities
nsim = 10^4
U_1 <- runif(nsim)
U_2 <- runif(nsim)
# transformed unif to norm
X_1 <- sqrt(-2 * log(U_1)) * cos(2 * pi * U_2)
X_2 <- sqrt(-2 * log(U_1)) * sin(2 * pi * U_2)
# rnorm for comparison
reg_norm <- rnorm(n = 10^4, 0, 1)
# placeholder array
U <- array(0, dim = c(nsim))
# fill array with simulated unifs
for (i in 1:nsim){
U[i] <- sum(runif(12, -0.5, 0.5))
}
# coerce to dataframe
X_1 <- tibble(X_1)
X_2 <- tibble(X_2)
U <- tibble(U)
reg_norm <- tibble(reg_norm)
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
x2_hist <- ggplot(X_2, aes(X_2)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
u_hist <- ggplot(U, aes(U)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
reg_norm_hist <- ggplot(reg_norm, aes(reg_norm)) + geom_histogram(fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4)) + xlab("rnorm")
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, reg_norm_hist, nrow = 4)
options(warn=-1)
knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
library(ggplot2)
library(dplyr)
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(bins = 50, fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, reg_norm_hist, nrow = 4)
# plot
x1_hist <- ggplot(X_1, aes(X_1)) + geom_histogram(bins = 50, fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
x2_hist <- ggplot(X_2, aes(X_2)) + geom_histogram(bins = 50, fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
u_hist <- ggplot(U, aes(U)) + geom_histogram(bins = 50, fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4))
reg_norm_hist <- ggplot(reg_norm, aes(reg_norm)) + geom_histogram(bins = 50, fill = "green", color = "black",  alpha = 0.2) + scale_x_continuous(limits=c(-4, 4)) + xlab("rnorm")
gridExtra::grid.arrange(x1_hist, x2_hist, u_hist, reg_norm_hist, nrow = 4)
# plot
x_hist <- ggplot(x, aes(x)) + geom_histogram(bins = 50, fill = "green", color = "black", alpha = 0.2)
gridExtra::grid.arrange(x_hist, x_plot, x_acf, ncol = 3)
knitr::opts_chunk$set(echo = TRUE)
# create function to get integrate() values
int_gam <- function(lambda){
integrate(function(x){
x^(lambda - 1) * exp(-x)
}, 0, Inf)$val
}
# plot against gammas
plot(lgamma(seq(0.01, 10, length.out = 100)),
log(apply(as.matrix(
seq(0.01, 10, length.out = 100)
), 1, int_gam))
xlab = "log(integrate(f))",
# plot against gammas
plot(lgamma(seq(0.01, 10, length.out = 100)),
log(apply(as.matrix(
seq(0.01, 10, length.out = 100)), 1, int_gam)),
xlab = "log(integrate(f))",
ylab = expression(log(Gamma(lambda))), pch = 19, cex = 0.6)
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100)
log_int_gam
library(magrittr)
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% apply(int_gam)
?apply
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% apply(1, int_gam)
log_int_gam
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(1, int_gam)
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(int_gam)
log_int_gam
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(int_gam) %>% log()
log_int_gam
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(int_gam) %>% log()
log_int_gam
log_gam_fun <- seq(0.01, 10, length.out = 100) %>% sapply(lgamma)
log_gam_fun
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(int_gam) %>% log() %>% tibble("output")
library(dplyr)
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(int_gam) %>% log() %>% tibble("output")
log_int_gam
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(int_gam) %>% log() %>% tibble("output" = .)
log_int_gam
log_gam_fun <- seq(0.01, 10, length.out = 100) %>% sapply(lgamma) %>% tibble("output" = .)
log_gam_fun
library(ggplot2)
ggplot() + geom_point(aes(x = log_int_gam$output, y = log_gam_fun$output))
ggplot() + geom_point(aes(x = log_int_gam$output, y = log_gam_fun$output)) +
xlab("log(integrate(f))") + ylab(expression(log(Gamma(lambda))))
ggplot() + geom_point(aes(x = log_int_gam$output, y = log_gam_fun$output)) + coord_fixed() +
xlab("log(integrate(f))") + ylab(expression(log(Gamma(lambda))))
ten_cauchy <- rcauchy(10) + 350
ten_cauchy <- rcauchy(10) + 350
likelihood <- function(theta){
u <- dcauchy(ten_cauchy[1] - theta)
for (i in 2:10){
u <- u * dcauchy(ten_cauchy[i] - theta)
}
return(u)
}
integrate(likelihood, -Inf, Inf)
theta
likelihood()
likelihood
# integrate product over +- inf
integrate(likelihood, -Inf, Inf)
ten_cauchy <- rcauchy(10)
# create vector of thetas
thetas <- seq(1, 10^3, length.out = 10^4)
# define 10 cauchys
ten_cauchy <- rcauchy(10)
# create integrate() function
cauc_int <- function(a){
integrate(likelihood, -a, a)
}
# create area() function
cauc_area <- function(a){
area(likelihood, -a, a)
}
# create vector of thetas
thetas <- seq(1, 10^3, length.out = 10^4)
# make dataframes
cauchy_integrates <- thetas %>% sapply(cauc_int) %>% log()
# create vector of thetas
thetas <- seq(1, 10^3, length.out = 10^4)
thetas
# make dataframes
cauchy_integrates <- thetas %>% sapply(cauc_int) %>% log() %>% tibble("output" = .)
# make dataframes
cauchy_integrates <- sapply(thetas, cauc_int) %>% log() %>% tibble("output" = .)
thetas
# make dataframes
cauchy_integrates <- seq(1, 10^3, length.out = 10^4) %>% sapply(thetas, cauc_int) %>% log() %>% tibble("output" = .)
# make dataframes
cauchy_integrates <- seq(1, 10^3, length.out = 10^4) %>% sapply(cauc_int) %>% log() %>% tibble("output" = .)
# make dataframes
cauchy_integrates <- seq(1, 1000, length.out = 10000) %>% sapply(cauc_int) %>% log() %>% tibble("output" = .)
# make data frames
log_int_gam <- seq(0.01, 10, length.out = 100) %>% sapply(int_gam) %>% log() %>% tibble("output" = .)
integrate(likelihood, -a, a)$val
# create integrate() function
cauc_int <- function(a){
integrate(likelihood, -a, a)$val
}
# make dataframes
cauc_integrate <- seq(1, 1000, length.out = 10000) %>% sapply(cauc_int) %>% log() %>% tibble("output" = .)
# make dataframes
cauc_integrate <- seq(1, 1000, length.out = 10000) %>% sapply(cauc_int) %>% log() %>% tibble("output" = .)
# create vector of thetas
thetas <- seq(1, 10^3, length.out = 10^4)
# make dataframes
cauc_integrate <- thetas %>% sapply(cauc_int) %>% log() %>% tibble("output" = .)
cauc_area <- thetas %>% sapply(cauc_area) %>% log() %>% tibble("output" = .)
# create area() function
cauc_area <- function(a){
area(likelihood, -a, a)
}
?area
# create area() function
cauc_area <- function(a){
MASS::area(likelihood, -a, a)
}
cauc_area <- thetas %>% sapply(cauc_area) %>% log() %>% tibble("output" = .)
?cbind
?range
# find dataframe range
bounds <- cbind(cauc_area, cauc_integrate) %>% range()
bounds
ggplot() + geom_point(aes(x = 0:1000, y = cauc_integrate$output))
ggplot() + geom_point(aes(x = 0:10000, y = cauc_integrate$output))
ggplot() + geom_point(aes(x = thetas, y = cauc_integrate$output))
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output)) +
geom_point(aes(x = thetas, y = cauc_area$output))
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output)) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 8)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output)) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output)) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green')
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output)) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 9, color = 'blue', alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 9, alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 9, alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2) +
ylim(bounds)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 9, alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2) +
ylim(bounds) + coord_fixed()
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 9, alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2) +
ylim(bounds)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 1, alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2) +
ylim(bounds)
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 1, alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2) +
ylim(bounds) + xlab("Integral Bound") + ylab("Integral Evaluation")
ggplot() +
geom_point(aes(x = thetas, y = cauc_integrate$output), shape = 1, alpha = 0.2) +
geom_point(aes(x = thetas, y = cauc_area$output), shape = 18, color = 'green', alpha = 0.2) +
ylim(bounds) + xlab("Integral Bound") + ylab("Integral Evaluation") +
ggtitle("Integrate in Black, Area in Green")
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60),tidy=TRUE)
options(width = 60)
library(odbc)
library(DBI)
rmarkdown::render("sql_practicum.Rmd", params = "ask")
setwd("~/Desktop/SS/Database_Design/SQL_Practicum")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
# rmarkdown::render("sql_practicum.Rmd", params = "ask")
sql_con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "localhost",
Database = "Northwind_SPP",
UID = "SA",
PWD = rstudioapi::askForPassword("Database password"),
Port = 1433)
rmarkdown::render("sql_practicum.Rmd", params = "ask")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
rmarkdown::render("sql_practicum.Rmd", params = "ask")
